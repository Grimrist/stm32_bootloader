/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define FLASH_USER_START_PAGE 128
#define FLASH_USER_END_PAGE 255
#define FLASH_USER_START_ADDR 0x08000000 + (2048 * FLASH_USER_START_PAGE)
#define FLASH_USER_END_ADDR 0x08000000 + (2048 * FLASH_USER_END_PAGE)
#define RESET_HANDLER FLASH_USER_START_ADDR + 4
#define USER_APP_VTAB ((const struct app_vectable_ *) FLASH_USER_START_ADDR)

#define WRITE_CMD 0x31
#define GO_CMD 0x20
#define SEND_CMD 0x00
#define ACK 0x79
#define NACK 0x1F

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
static FLASH_EraseInitTypeDef EraseInitStruct;
static uint32_t PageError;
char rx_cmd[2] = {0,0};
struct app_vectable_ {
	uint32_t Initial_SP;
	void (*Reset_Handler)(void);
};
enum recv_states {
	IDLE,
	ERASE,
	WRITE,
	GO
} state = IDLE;

uint32_t write_addr;
uint32_t write_filesize;
char bin_file[64000]; // Allocated pre-emptively
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  /* Listen in for incoming data */
//  HAL_UART_Receive(&huart2, &rx_cmd, 1, -1);
//  if(rx_cmd == WRITE_CMD) {
//	  HAL_UART_Receive(&huart2, &file_size, 4, -1);
//	  HAL_UART_Receive(&huart2, bin_file, file_size, -1);
//  }
//
//  /* Unlock the Flash to enable the flash control register access *************/
//  if (HAL_FLASH_Unlock() != HAL_OK) {
//	  while(1) {}
//  }
//  /* Fill EraseInit structure*/
//  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
//  EraseInitStruct.Banks     = FLASH_BANK_1;
//  EraseInitStruct.Page 		= FLASH_USER_START_PAGE;
//  EraseInitStruct.NbPages 	= 4;
//
//  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
//  {
//    /*
//      Error occurred while mass erase.
//      User can add here some code to deal with this error.
//      To know the code error, user can call function 'HAL_FLASH_GetError()'
//    */
//    /* Infinite loop */
//    while (1)
//    {
//    }
//  }
//
//  /* Program the user Flash area word by word */
//  uint32_t* user_addr = FLASH_USER_START_ADDR;
//  uint64_t* file_ptr = bin_file;
//  for(int i = 0; i < file_size; i++) {
//	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, user_addr, *file_ptr);
//	user_addr += 2;
//	file_ptr += 1;
//  }
//
//  /* Lock the Flash to disable the flash control register access */
//  HAL_FLASH_Lock();
//
//  /* Begin preparing for application jump */
//  HAL_RCC_DeInit();
//  HAL_DeInit();
//  __disable_irq();
//  SysTick->CTRL = 0;
//  SysTick->LOAD = 0;
//  SysTick->VAL = 0;
//  SCB->VTOR = FLASH_USER_START_ADDR;
//  __set_MSP(0x200BB800);
//  __DSB();
//  __ISB();
//  __enable_irq();
//  uint32_t Reset_Handler_addr = FLASH_USER_START_ADDR + 4;
//  void (*Reset_Handler)(void) = *((uint32_t*) Reset_Handler_addr);
//  Reset_Handler();


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch (state) {
		case IDLE:
			HAL_UART_Receive(&huart2, rx_cmd, 2, -1);
			if(rx_cmd[0] ^ rx_cmd[1] != 0) {
				HAL_UART_Transmit(&huart2, NACK, 1, -1);
				break;
			}
			if(rx_cmd[0] == WRITE_CMD) {
				state = WRITE;
				HAL_UART_Transmit(&huart2, ACK, 1, -1);
				break;
			}
			if(rx_cmd[0] == ERASE_CMD) {
				state = ERASE;
				HAL_UART_Transmit(&huart2, ACK, 1, -1);
				break;
			}
			if(rx_cmd[0] == GO_CMD) {
				state = GO;
				HAL_UART_Transmit(&huart2, ACK, 1, -1);
				break;
			}
			HAL_UART_Transmit(&huart2, NACK, 1, -1);
			break;

		case ERASE:
			uint32_t pages;
			uint32_t addr;
			HAL_UART_Receive(&huart2, &addr, 4, -1);
			HAL_UART_Receive(&huart2, &pages, 4, -1);
			/* Unlock the Flash to enable the flash control register access */
			if (HAL_FLASH_Unlock() != HAL_OK) {
				HAL_UART_Transmit(&huart2, NACK, 1, -1);
				break;
			}
			/* Fill EraseInit structure*/
			EraseInitStruct.TypeErase 	= FLASH_TYPEERASE_PAGES;
			EraseInitStruct.Banks     	= FLASH_BANK_1;
			EraseInitStruct.Page 		= addr;
			EraseInitStruct.NbPages 	= pages;

			if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
				HAL_UART_Transmit(&huart2, NACK, 1, -1);
			    HAL_FLASH_Lock();
				break;
			}
			HAL_FLASH_Lock();
			HAL_UART_Transmit(&huart2, ACK, 1, -1);
			state = IDLE;
			break;

		case WRITE:
			HAL_UART_Receive(&huart2, &write_addr, 4, -1);
			// TODO: Check for valid address
			HAL_UART_Transmit(&huart2, ACK, 1, -1);
			HAL_UART_Receive(&huart2, &file_size, 4, -1);
			// TODO: Receive checksum
			if(file_size > 64000) {
				HAL_UART_Transmit(&huart2, NACK, 1, -1);
				state = IDLE;
				break;
			}
			HAL_UART_Receive(&huart2, bin_file, file_size, -1);
			uint64_t file_ptr = bin_file;
			uint32_t user_addr = write_addr;
			for(int i = 0; i < file_size; i++) {
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, user_addr, *file_ptr) != HAL_OK) {
					HAL_UART_Transmit(&huart2, NACK, 1, -1);
					state = IDLE;
					break;
				}
				user_addr += 2;
				file_ptr += 1;
			}
			state = IDLE;

		case GO:
			HAL_UART_Receive(&huart2, &write_addr, 4, -1);
			// TODO: Check for valid address
			/* Begin preparing for application jump */
			HAL_RCC_DeInit();
			HAL_DeInit();
			__disable_irq();
			SysTick->CTRL = 0;
			SysTick->LOAD = 0;
			SysTick->VAL = 0;
			SCB->VTOR = write_addr;
			__set_MSP(0x200BB800); // TODO: Remember where this came from
			__DSB();
			__ISB();
			__enable_irq();
			uint32_t Reset_Handler_addr = write_addr + 4;
			void (*Reset_Handler)(void) = *((uint32_t*) Reset_Handler_addr);
			Reset_Handler();
			/* This should never execute */
			while(1) {
				// TODO: Add warning that execution failed?
			}
	}
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
